matB<-matrix(1/m,m,m)
rowSums( (1-p) * mat )
rowSums( ( p) * matB)
matA<-(1-p) * mat + ( p) * matB
####### We note we can write B as a vector 1/n * p *  Î£ x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
print(G%^%100)
}
myfunction(mat,.15)
myfunction(mat,.65)
edge<-read.table("edges.txt")
node<-read.table("nodes.txt")
G<-matrix(0,max(edge),max(edge))
n=max(edge)
#pages without links
length( setdiff(edge[,2],edge[,1]) ); head(setdiff(edge[,2],edge[,1]))
for( i in 1:max(edge) ) {
if( length( which(edge[,1]  == i)) == 0 ){ G[i,i]<-1;next}
G[i,edge[ which(edge[,1]  == i) ,2]]<-1 }
G<- apply(G, 2, "/",  rowSums(G)  )
all(round(rowSums(G),15) == 1)
p=.15
########
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
tt<-system.time(
repeat{
y<-x
i=i+1
x<-( (1-p) * t(matt) %*% x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm( ( (1-p) * t(matt) %*% x ) + ( rep( (1/m)* p * sum(x),m) ) )
if( norm(x-y) < 10^-14 ) {break} } )
x<<-x
print(tt)
print(paste0("Iterations: ", i))   }
#myfunction(G,.15)
node[,1]<-round(x,6)
head( node[with(node, order(V1,decreasing = T)), ] , 20)
### Let us use sparsity to speed things up
library(Matrix);rm(x)
edge<-read.table("edges.txt")
nodez<-read.table("nodes.txt")
zeroes<-setdiff(edge$V1,edge$V2)
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
dat<-data.frame(setdiff(edge$V1,edge$V2), setdiff(edge$V1,edge$V2))
names(dat)<-names(edge)
edge<-rbind(edge,dat);rm(dat)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
edge$V3<-1
edge[zeroes,3]<-0
tail(edge)
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
all(round(rowSums(A),14) == 1)
myfunction(A,.15)
nodez[,1]<-round( as.numeric( x ) , 6 )
head( nodez[with(node, order(V1,decreasing = T)), ] , 10)
edge<-read.table("web-NotreDame.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
rm(dat);rm(x)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
#sparseMatrix doesn't like zeroes
edge$V1<-edge$V1+1
edge$V2<-edge$V2+1
edge$V3<-1
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
n=dim(A)[1]
myfunctiom(A,.15)
edge<-read.table("web-NotreDame.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
rm(dat);rm(x)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
#sparseMatrix doesn't like zeroes
edge$V1<-edge$V1+1
edge$V2<-edge$V2+1
edge$V3<-1
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
n=dim(A)[1]
myfunction(A,.15)
dat<- ( data.frame(x ,  0:(length(x)-1)) )
x<-as.numeric(x)
edge<-read.table("web-NotreDame.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
rm(dat);rm(x)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
#sparseMatrix doesn't like zeroes
edge$V1<-edge$V1+1
edge$V2<-edge$V2+1
edge$V3<-1
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
myfunction(A,.15)
x<-as.numeric(x)
dat<- ( data.frame( x ,  0:(length(x)-1)) )
names(dat)<-c("p","page")
tail(dat)
head( dat[with(dat, order(p,decreasing = T)), ] , 10)
all(round(rowSums(A),14) == 1)
all(round(rowSums(A),10) == 1)
all(round(rowSums(A),13) == 1)
all(round(rowSums(A),12) == 1)
a<-sample(1:10,5)
mean(a)
a
a%*%rep(1/length(a),length(a))
system.time ( a%*%rep(1/length(a),length(a)) )
a<-sample(1:10,500,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
a<-sample(1:10,50000,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
system.time ( a%*%rep(1/length(a),length(a)) )
a%*%rep(1/length(a),length(a))
a%*%rep(1/length(a),length(a))
mean(a)
a<-sample(1:10,500100,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
a<-sample(1:10,5001010,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
####### We note we can write B as a vector 1/n * p *  sum x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
x<-   x/sum(x)
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
print(sort( sqrt(Re(eigen((1-p) *  (matt) + p * 1/m )$values )^2+
Im(eigen((1-p) *  (matt) + p * 1/m)$values)^2 ) , decreasing = T)[1:2])
}
myfunction(mat,.05)
mat<-matrix(0,5,5)
for( i in 1:5){
y<-sample((1:5)[-i],sample(2:4,1))
x<-sample(1:10,length(y))
x<-x/sum(x)
mat[i,y]<-x
}
mat;rowSums(mat)
####### We note we can write B as a vector 1/n * p *  sum x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
x<-   x/sum(x)
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
print(sort( sqrt(Re(eigen((1-p) *  (matt) + p * 1/m )$values )^2+
Im(eigen((1-p) *  (matt) + p * 1/m)$values)^2 ) , decreasing = T)[1:2])
}
myfunction(mat,.05)
myfunction(mat,.5)
myfunction(mat,.95)
library(igraph)
rm(list = ls())
library(igraph)
setwd("G:\\math\\504")
d <- read.table("karateclub.txt")
setwd("G:\\math\\504")
d <- read.table("karateclub.txt")
d <- read.table("karate club.txt")
g=graph.adjacency(as.matrix(d),mode="undirected",weighted=NULL,diag=FALSE)
plot.igraph(g)
A <- read.table("karateclub.txt")
A <- read.table("karate club.txt")
dim(A)
k<- (rowSums(A))
sum(A)/2
k
m<-1/2 * sum(rowSums(A))
m
B<-matrix(NA,dim(A)[1],dim(A)[1])
for( i in 1:nrow(B)){
for( j in 1:ncol(B)){
B[i,j]<-A[i,j] - 	( ( sum(A[,i])*sum(A[,j]) )  / (2*m) ) }}
B
eigen(B)
u1<-eigen(B)$vector[,1]
s<-ifelse(u1 > 0 , 1,-1)
Q<-(1/(4*m))  * (t(as.matrix(s)) %*% B %*% as.matrix(s))
Q
s
g=graph.adjacency(as.matrix(A),mode="undirected",weighted=NULL,diag=F)
plot.igraph(g)
V(g)$name<-1:(dim(A)[1])
V(g)$color<-ifelse(s == 1, "blue", "red")
plot.igraph(g)
u1
d
d <- read.table("karate club.csv")
d<-read.csv()
g=graph.adjacency(as.matrix(d),mode="undirected",weighted=NULL,diag=FALSE)
A <- read.table("karate club.csv")
dim(A)
A
A <- read.csv("karate club.csv")
dim(A)
A
k<- (rowSums(A))
sum(A)/2
k
m<-1/2 * sum(rowSums(A))
m
sum(A)
V(g)$color<-ifelse(s == 1, "yellow", "red")
plot.igraph(g)
plot.igraph(g)
A <- read.csv("karate club.csv")
dim(A)
A<-A[(35:68),]
sum(A)
dim(A)
A
A
rowSums(A)
A
tail(A)
library(igraph)
rm(list = ls())
setwd("G:\\math\\504")
d <- read.table("karate club.csv")
d<-read.csv()
g=graph.adjacency(as.matrix(d),mode="undirected",weighted=NULL,diag=FALSE)
plot.igraph(g)
A <- read.csv("karate club.csv")
A
tail(A)
A <- read.csv("karate club.csv",header=F)
A<-A[(35:68),]
sum(A)
k<-  rowSums(A)
k
sum(A)
k
tail(A)
m<-1/2 * sum(rowSums(A))
m
m
m*2
B<-matrix(NA,dim(A)[1],dim(A)[1])
for( i in 1:nrow(B)){
for( j in 1:ncol(B)){
B[i,j]<-A[i,j] - 	( ( sum(A[,i])*sum(A[,j]) )  / (2*m) ) }}
B
eigen(B)
B
head(B)
m
B<-matrix(NA,dim(A)[1],dim(A)[1])
for( i in 1:nrow(B)){
for( j in 1:ncol(B)){
B[i,j]<-A[i,j] - 	( ( sum(A[,i])*sum(A[,j]) )  / (2*m) ) }}
B
eigen(B)
u1<-eigen(B)$vector[,1]
s<-ifelse(u1 > 0 , 1,-1)
Q<-(1/(4*m))  * (t(as.matrix(s)) %*% B %*% as.matrix(s))
Q
m
s
g=graph.adjacency(as.matrix(A),mode="undirected",weighted=NULL,diag=F)
plot.igraph(g)
V(g)$name<-1:(dim(A)[1])
V(g)$color<-ifelse(s == 1, "yellow", "red")
plot.igraph(g)
Pi<-function(M){
x<-matrix(1,ncol(M),ncol(M))
v<-matrix(NA,ncol(M),ncol(M))
rq<-rep(NA,ncol(M))
repeat{
y<-x
for( i in 1:ncol(M) ){	v[,i]<-M%*%x[,i] }
x<-qr.Q(qr(v))
if (sum(abs(x[,1]-y[,1])) < 10^-6) { break }}
for( i in 1:ncol(M) ){rq[i] <-
t(x[,i]) %*% M %*% x[,i]/sum(x[,i]*x[,i]) }
mylist<-list(x,round(rq,10))
return(mylist)
}
Pi(B)[[2]];eigen(B)$values
Pi(B)[[1]][,2]
Pi(B)[[1]][,2]
eigen(B)$vector[,1]
Pi(B)[[2]]
Pi(B)[[1]][,1]
eigen(B)$vector[,1]
Pi(B)[[2]]
rm(list = ls())
setwd("G:\\math\\504")
d <- read.table("karate club.csv")
d<-read.csv()
g=graph.adjacency(as.matrix(d),mode="undirected",weighted=NULL,diag=FALSE)
plot.igraph(g)
A<-d
dim(A)
A<-A[(35:68),]
k<-  rowSums(A)
sum(A)
k
tail(A)
m<-1/2 * sum(rowSums(A))
m
Pi<-function(M){
x<-matrix(1,ncol(M),ncol(M))
v<-matrix(NA,ncol(M),ncol(M))
rq<-rep(NA,ncol(M))
repeat{
y<-x
for( i in 1:ncol(M) ){	v[,i]<-M%*%x[,i] }
x<-qr.Q(qr(v))
if (sum(abs(x[,1]-y[,1])) < 10^-6) { break }}
for( i in 1:ncol(M) ){rq[i] <-
t(x[,i]) %*% M %*% x[,i]/sum(x[,i]*x[,i]) }
mylist<-list(x,round(rq,10))
return(mylist)
}
# loading karate dataset
library(igraph)
rm(list = ls())
setwd("G:\\math\\504")
d <- read.table("karateclub.txt")
g=graph.adjacency(as.matrix(d),mode="undirected",weighted=NULL,diag=FALSE)
plot.igraph(g)
A <- read.table("karateclub.txt")
dim(A)
k<- (rowSums(A))
sum(A)/2
k
m<-1/2 * sum(rowSums(A))
m
B<-matrix(NA,dim(A)[1],dim(A)[1])
for( i in 1:nrow(B)){
for( j in 1:ncol(B)){
B[i,j]<-A[i,j] - 	( ( sum(A[,i])*sum(A[,j]) )  / (2*m) ) }}
B
eigen(B)
u1<-eigen(B)$vector[,1]
s<-ifelse(u1 > 0 , 1,-1)
Q<-(1/(4*m))  * (t(as.matrix(s)) %*% B %*% as.matrix(s))
Q
s
g=graph.adjacency(as.matrix(A),mode="undirected",weighted=NULL,diag=F)
plot.igraph(g)
V(g)$name<-1:(dim(A)[1])
V(g)$color<-ifelse(s == 1, "blue", "red")
plot.igraph(g)
library(igraph)
rm(list = ls())
setwd("G:\\math\\504")
d <- read.table("karateclub.txt")
d <- read.table("karateclub.txt")
g=graph.adjacency(as.matrix(d),mode="undirected",weighted=NULL,diag=FALSE)
A <- read.table("karateclub.txt")
A <- read.table("karateclub.txt")
dim(A)
k<- (rowSums(A))
sum(A)/2
k
m<-1/2 * sum(rowSums(A))
m
B<-matrix(NA,dim(A)[1],dim(A)[1])
for( i in 1:nrow(B)){
for( j in 1:ncol(B)){
B[i,j]<-A[i,j] - 	( ( sum(A[,i])*sum(A[,j]) )  / (2*m) ) }}
B
eigen(B)
u1<-eigen(B)$vector[,1]
s<-ifelse(u1 > 0 , 1,-1)
Q<-(1/(4*m))  * (t(as.matrix(s)) %*% B %*% as.matrix(s))
Q
s
g=graph.adjacency(as.matrix(A),mode="undirected",weighted=NULL,diag=F)
V(g)$name<-1:(dim(A)[1])
plot.igraph(g)
B
B[1,1]
Pi<-function(M){
x<-matrix(1,ncol(M),ncol(M))
v<-matrix(NA,ncol(M),ncol(M))
rq<-rep(NA,ncol(M))
repeat{
y<-x
for( i in 1:ncol(M) ){	v[,i]<-M%*%x[,i] }
x<-qr.Q(qr(v))
if (sum(abs(x[,1]-y[,1])) < 10^-6) { break }}
for( i in 1:ncol(M) ){rq[i] <-
t(x[,i]) %*% M %*% x[,i]/sum(x[,i]*x[,i]) }
mylist<-list(x,round(rq,10))
return(mylist)
}
Pi(B)[[2]]
eigen(B)$values
# loading karate dataset
library(igraph)
rm(list = ls())
setwd("G:\\math\\504")
d <- read.table("karateclub.txt")
g=graph.adjacency(as.matrix(d),mode="undirected",weighted=NULL,diag=FALSE)
plot.igraph(g)
A <- read.table("karateclub.txt")
dim(A)
k<- (rowSums(A))
sum(A)/2
k
m<-1/2 * sum(rowSums(A))
m
B<-matrix(NA,dim(A)[1],dim(A)[1])
for( i in 1:nrow(B)){
for( j in 1:ncol(B)){
B[i,j]<-A[i,j] - 	( ( sum(A[,i])*sum(A[,j]) )  / (2*m) ) }}
B
eigen(B)
u1<-eigen(B)$vector[,1]
s<-ifelse(u1 > 0 , 1,-1)
Q<-(1/(4*m))  * (t(as.matrix(s)) %*% B %*% as.matrix(s))
Q
s
g=graph.adjacency(as.matrix(A),mode="undirected",weighted=NULL,diag=F)
plot.igraph(g)
V(g)$name<-1:(dim(A)[1])
V(g)$color<-ifelse(s == 1, "blue", "red")
plot.igraph(g)
# manual eigenvectors
Pi<-function(M){
x<-matrix(1,ncol(M),ncol(M))
v<-matrix(NA,ncol(M),ncol(M))
rq<-rep(NA,ncol(M))
repeat{
y<-x
for( i in 1:ncol(M) ){	v[,i]<-M%*%x[,i] }
x<-qr.Q(qr(v))
if (sum(abs(x[,1]-y[,1])) < 10^-6) { break }}
for( i in 1:ncol(M) ){rq[i] <-
t(x[,i]) %*% M %*% x[,i]/sum(x[,i]*x[,i]) }
mylist<-list(x,round(rq,10))
return(mylist)
}
Pi(B)[[2]]
eigen(B)$values
options(scipen = 999)
eigen(B)$values
Pi(B)[[2]]
Pi<-function(M){
x<-matrix(1,ncol(M),ncol(M))
v<-matrix(NA,ncol(M),ncol(M))
rq<-rep(NA,ncol(M))
i=0
repeat{
y<-x
for( i in 1:ncol(M) ){	v[,i]<-M%*%x[,i] }
x<-qr.Q(qr(v))
i=i+1
if (sum(abs(x[,1]-y[,1])) < 10^-6) { break }}
for( i in 1:ncol(M) ){rq[i] <-
t(x[,i]) %*% M %*% x[,i]/sum(x[,i]*x[,i]) }
mylist<-list(x,round(rq,10),i)
return(mylist)
}
Pi(B)[[2]]
Pi(B)
