setdiff(edge$V1,edge$V2)
zeroes
edge<-read.table("edges.txt")
nodez<-read.table("nodes.txt")
zeroes<-setdiff(edge$V1,edge$V2)
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
dat<-data.frame(setdiff(edge$V1,edge$V2), setdiff(edge$V1,edge$V2))
names(dat)<-names(edge)
edge<-rbind(edge,dat);rm(dat)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
edge$V3<-1
edge[zeroes,3]<-0
tail(edge)
library(Matrix)
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
all(round(rowSums(A),15) == 1)
all(round(rowSums(A),14) == 1)
myfunction(A,.15)
nodez$P<-x
head( nodez[with(nodez, order(P,decreasing = T)), ] , 10)
head(nodez)
nodez<-read.table("nodes.txt")
head(nodez)
head(x)
nodez$P<-as.numeric( x )
head( nodez[with(nodez, order(P,decreasing = T)), ] , 10)
head( node[with(node, order(V1,decreasing = T)), ] , 10)
head( nodez[with(nodez, order(P,decreasing = T)), ] , 10)
head( node[with(node, order(V1,decreasing = T)), ] , 10)
nodez<-read.table("nodes.txt")
nodez[,1]<-x
head( nodez[with(node, order(V1,decreasing = T)), ] , 20)
nodez[,1]<-as.numeric( x )
head( nodez[with(node, order(V1,decreasing = T)), ] , 20)
head( node[with(node, order(V1,decreasing = T)), ] , 10)
options(width = 400)
rm(list = ls())
options(warn=-1)
suppressMessages(library(expm))
options(warn=0)
set.seed(2)
options(scipen=999)
setwd("g:\\math\\504")
mat<-matrix(0,5,5)
for( i in 1:5){
y<-sample(1:5,sample(2:5,1))
x<-sample(1:10,length(y))
x<-x/sum(x)
mat[i,y]<-x
}
mat;rowSums(mat)
m=5
p=.15
matB<-matrix(1/m,m,m)
rowSums( (1-p) * mat )
rowSums( ( p) * matB)
matA<-(1-p) * mat + ( p) * matB
####### We note we can write B as a vector 1/n * p *  Î£ x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
print(G%^%100)
}
myfunction(mat,.15)
myfunction(mat,.65)
edge<-read.table("edges.txt")
node<-read.table("nodes.txt")
G<-matrix(0,max(edge),max(edge))
n=max(edge)
#pages without links
length( setdiff(edge[,2],edge[,1]) ); head(setdiff(edge[,2],edge[,1]))
for( i in 1:max(edge) ) {
if( length( which(edge[,1]  == i)) == 0 ){ G[i,i]<-1;next}
G[i,edge[ which(edge[,1]  == i) ,2]]<-1 }
G<- apply(G, 2, "/",  rowSums(G)  )
all(round(rowSums(G),15) == 1)
p=.15
########
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
tt<-system.time(
repeat{
y<-x
i=i+1
x<-( (1-p) * t(matt) %*% x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm( ( (1-p) * t(matt) %*% x ) + ( rep( (1/m)* p * sum(x),m) ) )
if( norm(x-y) < 10^-14 ) {break} } )
x<<-x
print(tt)
print(paste0("Iterations: ", i))   }
#myfunction(G,.15)
node[,1]<-round(x,6)
head( node[with(node, order(V1,decreasing = T)), ] , 20)
### Let us use sparsity to speed things up
library(Matrix);rm(x)
edge<-read.table("edges.txt")
nodez<-read.table("nodes.txt")
zeroes<-setdiff(edge$V1,edge$V2)
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
dat<-data.frame(setdiff(edge$V1,edge$V2), setdiff(edge$V1,edge$V2))
names(dat)<-names(edge)
edge<-rbind(edge,dat);rm(dat)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
edge$V3<-1
edge[zeroes,3]<-0
tail(edge)
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
all(round(rowSums(A),14) == 1)
myfunction(A,.15)
nodez[,1]<-round( as.numeric( x ) , 6 )
head( nodez[with(node, order(V1,decreasing = T)), ] , 10)
edge<-read.table("web-NotreDame.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
rm(dat);rm(x)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
#sparseMatrix doesn't like zeroes
edge$V1<-edge$V1+1
edge$V2<-edge$V2+1
edge$V3<-1
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
n=dim(A)[1]
myfunctiom(A,.15)
edge<-read.table("web-NotreDame.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
rm(dat);rm(x)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
#sparseMatrix doesn't like zeroes
edge$V1<-edge$V1+1
edge$V2<-edge$V2+1
edge$V3<-1
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
n=dim(A)[1]
myfunction(A,.15)
dat<- ( data.frame(x ,  0:(length(x)-1)) )
x<-as.numeric(x)
edge<-read.table("web-NotreDame.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
rm(dat);rm(x)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
#sparseMatrix doesn't like zeroes
edge$V1<-edge$V1+1
edge$V2<-edge$V2+1
edge$V3<-1
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
myfunction(A,.15)
x<-as.numeric(x)
dat<- ( data.frame( x ,  0:(length(x)-1)) )
names(dat)<-c("p","page")
tail(dat)
head( dat[with(dat, order(p,decreasing = T)), ] , 10)
all(round(rowSums(A),14) == 1)
all(round(rowSums(A),10) == 1)
all(round(rowSums(A),13) == 1)
all(round(rowSums(A),12) == 1)
a<-sample(1:10,5)
mean(a)
a
a%*%rep(1/length(a),length(a))
system.time ( a%*%rep(1/length(a),length(a)) )
a<-sample(1:10,500,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
a<-sample(1:10,50000,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
system.time ( a%*%rep(1/length(a),length(a)) )
a%*%rep(1/length(a),length(a))
a%*%rep(1/length(a),length(a))
mean(a)
a<-sample(1:10,500100,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
a<-sample(1:10,5001010,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
edge<-read.table("edges.txt")
node<-read.table("nodes.txt")
G<-matrix(0,max(edge),max(edge))
n=max(edge)
length( setdiff(edge[,2],edge[,1]) ); head(setdiff(edge[,2],edge[,1]))
for( i in 1:max(edge) ) {
if( length( which(edge[,1]  == i)) == 0 ){ G[i,i]<-1;next}
G[i,edge[ which(edge[,1]  == i) ,2]]<-1 }
G<- apply(G, 2, "/",  rowSums(G)  )
G<- apply(G, 2, "/",  rowSums(G)  )
all(round(rowSums(G),15) == 1)
p=.15
p=.15
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
tt<-system.time(
repeat{
y<-x
i=i+1
x<-( (1-p) * t(matt) %*% x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm( ( (1-p) * t(matt) %*% x ) + ( rep( (1/m)* p * sum(x),m) ) )
if( norm(x-y) < 10^-14 ) {break} } )
x<<-x
print(tt)
print(paste0("Iterations: ", i))   }
x<-sample(1:10,m,replace=T);i=1
m=dim(matt)[1]
edge<-read.table("edges.txt")
node<-read.table("nodes.txt")
G<-matrix(0,max(edge),max(edge))
n=max(edge)
rm(list = ls())
options(warn=-1)
suppressMessages(library(expm))
options(warn=0)
set.seed(2)
options(scipen=999)
setwd("g:\\math\\504")
edge<-read.table("edges.txt")
node<-read.table("nodes.txt")
G<-matrix(0,max(edge),max(edge))
n=max(edge)
length( setdiff(edge[,2],edge[,1]) ); head(setdiff(edge[,2],edge[,1]))
for( i in 1:max(edge) ) {
if( length( which(edge[,1]  == i)) == 0 ){ G[i,i]<-1;next}
G[i,edge[ which(edge[,1]  == i) ,2]]<-1 }
G<- apply(G, 2, "/",  rowSums(G)  )
all(round(rowSums(G),15) == 1)
p=.15
m=dim(G)[1]
m
x<-sample(1:10,m,replace=T);i=1
mat<-matrix(0,5,5)
for( i in 1:5){
y<-sample(1:5,sample(2:5,1))
x<-sample(1:10,length(y))
x<-x/sum(x)
mat[i,y]<-x
}
mat;rowSums(mat)
m=5
p=.15
matB<-matrix(1/m,m,m)
rowSums( (1-p) * mat )
rowSums( ( p) * matB)
matA<-(1-p) * mat + ( p) * matB
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
print(G%^%100)
}
myfunction(mat,.15)
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
#print(G%^%100)
}
myfunction(mat,.15)
myfunction(mat,.65)
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
p=.15
( rep( (1/m)* p * sum(x),m) )
( (1-p) * t(matt) %*%x )
( (1-p) * t(mat) %*%x ) + ( rep( (1/m)* p * sum(x),m) )
p=.65
( (1-p) * t(mat) %*%x ) + ( rep( (1/m)* p * sum(x),m) )
p=.95
( (1-p) * t(mat) %*%x ) + ( rep( (1/m)* p * sum(x),m) )
myfunction(mat,.95)
B<-matrix(1/m,m,m)
B
t(mat) %*% x
B<-matrix(1/m,m,m)
( (1-p) * t(mat) %*% x ) + ( p * t(B) %*x% )
( p * t(B) %*x% )
t(B)
p * t(B) %*x%
( (1-p) * t(mat) %*% x ) + ( p * t(B) %*% x)
eigen(   ( (1-p) * t(mat) %*% x ) + ( p * t(B) %*% x)  )
(1-p) *  (mat)
(1-p) *  (mat) + p * 1/m
p * 1/m
(1-p) *  (mat)
(1-p) *  (mat) + p * 1/m
gg<-(1-p) *  (mat) + p * 1/m
rowSums(gg)
eigen(gg)
eigen(gg)$vector
eigen(gg)$vectors[,1]
eigen(gg)$values
eigen(gg)$values[1:2]
Re(eigen(gg)$values[1:2])
eigen(gg)$values.real
eigen(gg)$values.imag
EI<-(eigen(gg)$values)
EI.real
Re(eigen(gg)$values[1:2])
Re(eigen(gg)$values )
Im(eigen(gg)$values)
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )[-1]
max( sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )[-1] )
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
p=.95
gg<-(1-p) *  (mat) + p * 1/m
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
p=.9
p=.1
gg<-(1-p) *  (mat) + p * 1/m
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
p=.01
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
p=.01
gg<-(1-p) *  (mat) + p * 1/m
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
p=.99
gg<-(1-p) *  (mat) + p * 1/m
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
(1-p) *  (mat)
p * 1/m
p * 1/m
rep( (1/m)* p * sum(x),m) )
rep( (1/m)* p ,m) )
rep( (1/m)* p ,m)
sqrt(Re(eigen( (1-p) *  (mat))$values )^2+Im(eigen( (1-p) *  (mat))$values)^2 )
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
p=.99
gg<-(1-p) *  (mat) + p * 1/m
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
p=.0
gg<-(1-p) *  (mat) + p * 1/m
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
p= 0
gg<-(1-p) *  (mat) + p * 1/m
sqrt(Re(eigen(gg)$values )^2+Im(eigen(gg)$values)^2 )
eigen(   ( (1-p) * t(mat) %*% x ) + ( p * t(B) %*% x)  )
gg<-
sqrt(Re(eigen((1-p) *  (mat) + p * 1/m )$values )^2+Im(eigen((1-p) *  (mat) + p * 1/m)$values)^2 )
gg<-
sqrt(Re(eigen((1-p) *  (mat) + p * 1/m )$values )^2+Im(eigen((1-p) *  (mat) + p * 1/m)$values)^2 )
gg<-
sqrt(Re(eigen((1-p) *  (mat) + p * 1/m )$values )^2+Im(eigen((1-p) *  (mat) + p * 1/m)$values)^2 )
sqrt(Re(eigen((1-p) *  (mat) + p * 1/m )$values )^2+Im(eigen((1-p) *  (mat) + p * 1/m)$values)^2 )
.3/1
p= 0.9
sqrt(Re(eigen((1-p) *  (mat) + p * 1/m )$values )^2+Im(eigen((1-p) *  (mat) + p * 1/m)$values)^2 )
sqrt(Re(eigen((1-p) *  (mat) + p * 1/m )$values )^2+Im(eigen((1-p) *  (mat) + p * 1/m)$values)^2 )
sort( sqrt(Re(eigen((1-p) *  (mat) + p * 1/m )$values )^2+Im(eigen((1-p) *  (mat) + p * 1/m)$values)^2 ) )
sort( sqrt(Re(eigen((1-p) *  (mat) + p * 1/m )$values )^2+Im(eigen((1-p) *  (mat) + p * 1/m)$values)^2 ) , decreasing = T)
sort( sqrt(Re(eigen((1-p) *  (mat) + p * 1/m )$values )^2+Im(eigen((1-p) *  (mat) + p * 1/m)$values)^2 ) , decreasing = T)[1:2]
####### We note we can write B as a vector 1/n * p *  sum x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
x<-sum( x/sum(x) )
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
print(sort( sqrt(Re(eigen((1-p) *  (matt) + p * 1/m )$values )^2+
Im(eigen((1-p) *  (matt) + p * 1/m)$values)^2 ) , decreasing = T)[1:2])  }
myfunction(mat,.05)
head(mat)
####### We note we can write B as a vector 1/n * p *  sum x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
x<-sum( x/sum(x) )
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
#print(sort( sqrt(Re(eigen((1-p) *  (matt) + p * 1/m )$values )^2+
#  Im(eigen((1-p) *  (matt) + p * 1/m)$values)^2 ) , decreasing = T)[1:2])  }
myfunction(mat,.05)
myfunction(mat,.5)
myfunction(mat,.95)
####### We note we can write B as a vector 1/n * p *  sum x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
x<-sum( x/sum(x) )
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
#print(sort( sqrt(Re(eigen((1-p) *  (matt) + p * 1/m )$values )^2+
#  Im(eigen((1-p) *  (matt) + p * 1/m)$values)^2 ) , decreasing = T)[1:2])
}
myfunction(mat,.05)
####### We note we can write B as a vector 1/n * p *  sum x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
x<-   x/sum(x)
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
#print(sort( sqrt(Re(eigen((1-p) *  (matt) + p * 1/m )$values )^2+
#  Im(eigen((1-p) *  (matt) + p * 1/m)$values)^2 ) , decreasing = T)[1:2])
}
myfunction(mat,.05)
myfunction(mat,.5)
myfunction(mat,.95)
gc()
rm(list = ls())
options(warn=-1)
suppressMessages(library(expm))
options(warn=0)
set.seed(2)
options(scipen=999)
setwd("g:\\math\\504")
mat<-matrix(0,5,5)
for( i in 1:5){
y<-sample(1:5,sample(2:5,1))
x<-sample(1:10,length(y))
x<-x/sum(x)
mat[i,y]<-x
}
mat;rowSums(mat)
m=5
p=.15
require("diagram")
